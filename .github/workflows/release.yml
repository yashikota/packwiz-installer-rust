name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  BINARY_NAME: packwiz-installer

jobs:
  build:
    name: ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: packwiz-installer-x86_64-unknown-linux-gnu.tar.gz
            use_cross: false
          - os: macos-13
            target: x86_64-apple-darwin
            archive: packwiz-installer-x86_64-apple-darwin.tar.gz
            use_cross: false
          - os: macos-14
            target: aarch64-apple-darwin
            archive: packwiz-installer-aarch64-apple-darwin.tar.gz
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: packwiz-installer-x86_64-pc-windows-msvc.zip
            use_cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross
        if: ${{ matrix.use_cross }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build (release) with cross
        if: ${{ matrix.use_cross }}
        run: cross build --release --locked --target ${{ matrix.target }}

      - name: Build (release) with cargo
        if: ${{ !matrix.use_cross }}
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Package (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${BINARY_NAME} dist/${BINARY_NAME}
          tar -C dist -czf dist/${{ matrix.archive }} ${BINARY_NAME}
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum dist/${{ matrix.archive }} | awk '{print $1}' > dist/${{ matrix.archive }}.sha256
          else
            shasum -a 256 dist/${{ matrix.archive }} | awk '{print $1}' > dist/${{ matrix.archive }}.sha256
          fi

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\${{ matrix.target }}\release\${env:BINARY_NAME}.exe dist\${env:BINARY_NAME}.exe
          Compress-Archive -Path dist\${env:BINARY_NAME}.exe -DestinationPath dist\${{ matrix.archive }}
          (Get-FileHash -Algorithm SHA256 dist\${{ matrix.archive }}).Hash | Out-File -NoNewline dist\${{ matrix.archive }}.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}
          path: dist/*

  publish:
    name: Publish Release (immutable)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: dist
          merge-multiple: true

      - name: Create draft release and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME}"
          gh release create "$TAG" --draft --generate-notes dist/*

      - name: Publish release (make immutable)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME}"
          gh release edit "$TAG" --draft=false --latest
